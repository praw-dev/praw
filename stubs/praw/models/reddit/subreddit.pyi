from ...exceptions import APIException as APIException, ClientException as ClientException
from ...util.cache import cachedproperty as cachedproperty
from ..listing.generator import ListingGenerator as ListingGenerator
from ..listing.mixins import SubredditListingMixin as SubredditListingMixin
from .base import RedditBase as RedditBase
from .emoji import SubredditEmoji as SubredditEmoji
from .mixins import FullnameMixin as FullnameMixin, MessageableMixin as MessageableMixin
from .modmail import ModmailConversation as ModmailConversation
from typing import Any, Optional

class Subreddit(MessageableMixin, SubredditListingMixin, FullnameMixin, RedditBase):
    STR_FIELD: str = ...
    MESSAGE_PREFIX: str = ...
    @staticmethod
    def _create_or_update(_reddit: Any, allow_images: Optional[Any] = ..., allow_post_crossposts: Optional[Any] = ..., allow_top: Optional[Any] = ..., collapse_deleted_comments: Optional[Any] = ..., comment_score_hide_mins: Optional[Any] = ..., description: Optional[Any] = ..., domain: Optional[Any] = ..., exclude_banned_modqueue: Optional[Any] = ..., header_hover_text: Optional[Any] = ..., hide_ads: Optional[Any] = ..., lang: Optional[Any] = ..., key_color: Optional[Any] = ..., link_type: Optional[Any] = ..., name: Optional[Any] = ..., over_18: Optional[Any] = ..., public_description: Optional[Any] = ..., public_traffic: Optional[Any] = ..., show_media: Optional[Any] = ..., show_media_preview: Optional[Any] = ..., spam_comments: Optional[Any] = ..., spam_links: Optional[Any] = ..., spam_selfposts: Optional[Any] = ..., spoilers_enabled: Optional[Any] = ..., sr: Optional[Any] = ..., submit_link_label: Optional[Any] = ..., submit_text: Optional[Any] = ..., submit_text_label: Optional[Any] = ..., subreddit_type: Optional[Any] = ..., suggested_comment_sort: Optional[Any] = ..., title: Optional[Any] = ..., wiki_edit_age: Optional[Any] = ..., wiki_edit_karma: Optional[Any] = ..., wikimode: Optional[Any] = ..., **other_settings: Any) -> None: ...
    @staticmethod
    def _subreddit_list(subreddit: Any, other_subreddits: Any): ...
    @property
    def _kind(self): ...
    def banned(self): ...
    def collections(self): ...
    def contributor(self): ...
    def emoji(self): ...
    def filters(self): ...
    def flair(self): ...
    def mod(self): ...
    def moderator(self): ...
    def modmail(self): ...
    def muted(self): ...
    def quaran(self): ...
    def stream(self): ...
    def stylesheet(self): ...
    def widgets(self): ...
    def wiki(self): ...
    display_name: Any = ...
    _path: Any = ...
    def __init__(self, reddit: Any, display_name: Optional[Any] = ..., _data: Optional[Any] = ...) -> None: ...
    def _fetch_info(self): ...
    def _fetch_data(self): ...
    _fetched: bool = ...
    def _fetch(self) -> None: ...
    def _submit_media(self, data: Any, timeout: Any, without_websockets: Any): ...
    def _upload_media(self, media_path: Any): ...
    def random(self): ...
    def rules(self): ...
    def search(self, query: Any, sort: str = ..., syntax: str = ..., time_filter: str = ..., **generator_kwargs: Any): ...
    def sticky(self, number: int = ...): ...
    def submit(self, title: Any, selftext: Optional[Any] = ..., url: Optional[Any] = ..., flair_id: Optional[Any] = ..., flair_text: Optional[Any] = ..., resubmit: bool = ..., send_replies: bool = ..., nsfw: bool = ..., spoiler: bool = ..., collection_id: Optional[Any] = ...): ...
    def submit_image(self, title: Any, image_path: Any, flair_id: Optional[Any] = ..., flair_text: Optional[Any] = ..., resubmit: bool = ..., send_replies: bool = ..., nsfw: bool = ..., spoiler: bool = ..., timeout: int = ..., collection_id: Optional[Any] = ..., without_websockets: bool = ...): ...
    def submit_video(self, title: Any, video_path: Any, videogif: bool = ..., thumbnail_path: Optional[Any] = ..., flair_id: Optional[Any] = ..., flair_text: Optional[Any] = ..., resubmit: bool = ..., send_replies: bool = ..., nsfw: bool = ..., spoiler: bool = ..., timeout: int = ..., collection_id: Optional[Any] = ..., without_websockets: bool = ...): ...
    def subscribe(self, other_subreddits: Optional[Any] = ...) -> None: ...
    def traffic(self): ...
    def unsubscribe(self, other_subreddits: Optional[Any] = ...) -> None: ...

class SubredditFilters:
    subreddit: Any = ...
    def __init__(self, subreddit: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def add(self, subreddit: Any) -> None: ...
    def remove(self, subreddit: Any) -> None: ...

class SubredditFlair:
    def link_templates(self): ...
    def templates(self): ...
    def __call__(self, redditor: Optional[Any] = ..., **generator_kwargs: Any): ...
    subreddit: Any = ...
    def __init__(self, subreddit: Any) -> None: ...
    def configure(self, position: str = ..., self_assign: bool = ..., link_position: str = ..., link_self_assign: bool = ..., **settings: Any) -> None: ...
    def delete(self, redditor: Any) -> None: ...
    def delete_all(self): ...
    def set(self, redditor: Optional[Any] = ..., text: str = ..., css_class: str = ..., flair_template_id: Optional[Any] = ...) -> None: ...
    def update(self, flair_list: Any, text: str = ..., css_class: str = ...): ...

class SubredditFlairTemplates:
    @staticmethod
    def flair_type(is_link: Any): ...
    subreddit: Any = ...
    def __init__(self, subreddit: Any) -> None: ...
    def _add(self, text: Any, css_class: str = ..., text_editable: bool = ..., is_link: Optional[Any] = ..., background_color: Optional[Any] = ..., text_color: Optional[Any] = ..., mod_only: Optional[Any] = ..., allowable_content: Optional[Any] = ..., max_emojis: Optional[Any] = ...) -> None: ...
    def _clear(self, is_link: Optional[Any] = ...) -> None: ...
    def delete(self, template_id: Any) -> None: ...
    def update(self, template_id: Any, text: Any, css_class: str = ..., text_editable: bool = ..., background_color: Optional[Any] = ..., text_color: Optional[Any] = ..., mod_only: Optional[Any] = ..., allowable_content: Optional[Any] = ..., max_emojis: Optional[Any] = ...) -> None: ...

class SubredditRedditorFlairTemplates(SubredditFlairTemplates):
    def __iter__(self) -> Any: ...
    def add(self, text: Any, css_class: str = ..., text_editable: bool = ..., background_color: Optional[Any] = ..., text_color: Optional[Any] = ..., mod_only: Optional[Any] = ..., allowable_content: Optional[Any] = ..., max_emojis: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...

class SubredditLinkFlairTemplates(SubredditFlairTemplates):
    def __iter__(self) -> Any: ...
    def add(self, text: Any, css_class: str = ..., text_editable: bool = ..., background_color: Optional[Any] = ..., text_color: Optional[Any] = ..., mod_only: Optional[Any] = ..., allowable_content: Optional[Any] = ..., max_emojis: Optional[Any] = ...) -> None: ...
    def clear(self) -> None: ...

class SubredditModeration:
    @staticmethod
    def _handle_only(only: Any, generator_kwargs: Any) -> None: ...
    subreddit: Any = ...
    def __init__(self, subreddit: Any) -> None: ...
    def accept_invite(self) -> None: ...
    def edited(self, only: Optional[Any] = ..., **generator_kwargs: Any): ...
    def inbox(self, **generator_kwargs: Any): ...
    def log(self, action: Optional[Any] = ..., mod: Optional[Any] = ..., **generator_kwargs: Any): ...
    def modqueue(self, only: Optional[Any] = ..., **generator_kwargs: Any): ...
    def removal_reasons(self): ...
    def reports(self, only: Optional[Any] = ..., **generator_kwargs: Any): ...
    def settings(self): ...
    def spam(self, only: Optional[Any] = ..., **generator_kwargs: Any): ...
    def unmoderated(self, **generator_kwargs: Any): ...
    def unread(self, **generator_kwargs: Any): ...
    def update(self, **settings: Any): ...

class SubredditQuarantine:
    subreddit: Any = ...
    def __init__(self, subreddit: Any) -> None: ...
    def opt_in(self) -> None: ...
    def opt_out(self) -> None: ...

class SubredditRelationship:
    def __call__(self, redditor: Optional[Any] = ..., **generator_kwargs: Any): ...
    relationship: Any = ...
    subreddit: Any = ...
    def __init__(self, subreddit: Any, relationship: Any) -> None: ...
    def add(self, redditor: Any, **other_settings: Any) -> None: ...
    def remove(self, redditor: Any) -> None: ...

class ContributorRelationship(SubredditRelationship):
    def leave(self) -> None: ...

class ModeratorRelationship(SubredditRelationship):
    PERMISSIONS: Any = ...
    @staticmethod
    def _handle_permissions(permissions: Any, other_settings: Any): ...
    def __call__(self, redditor: Optional[Any] = ...): ...
    def add(self, redditor: Any, permissions: Optional[Any] = ..., **other_settings: Any) -> None: ...
    def invite(self, redditor: Any, permissions: Optional[Any] = ..., **other_settings: Any) -> None: ...
    def leave(self) -> None: ...
    def remove_invite(self, redditor: Any) -> None: ...
    def update(self, redditor: Any, permissions: Optional[Any] = ...) -> None: ...
    def update_invite(self, redditor: Any, permissions: Optional[Any] = ...) -> None: ...

class Modmail:
    def __call__(self, id: Optional[Any] = ..., mark_read: bool = ...): ...
    subreddit: Any = ...
    def __init__(self, subreddit: Any) -> None: ...
    def _build_subreddit_list(self, other_subreddits: Any): ...
    def bulk_read(self, other_subreddits: Optional[Any] = ..., state: Optional[Any] = ...): ...
    def conversations(self, after: Optional[Any] = ..., limit: Optional[Any] = ..., other_subreddits: Optional[Any] = ..., sort: Optional[Any] = ..., state: Optional[Any] = ...) -> None: ...
    def create(self, subject: Any, body: Any, recipient: Any, author_hidden: bool = ...): ...
    def subreddits(self) -> None: ...
    def unread_count(self): ...

class SubredditStream:
    subreddit: Any = ...
    def __init__(self, subreddit: Any) -> None: ...
    def comments(self, **stream_options: Any): ...
    def submissions(self, **stream_options: Any): ...

class SubredditStylesheet:
    def __call__(self): ...
    subreddit: Any = ...
    def __init__(self, subreddit: Any) -> None: ...
    def _update_structured_styles(self, style_data: Any) -> None: ...
    def _upload_image(self, image_path: Any, data: Any): ...
    def _upload_style_asset(self, image_path: Any, image_type: Any): ...
    def delete_banner(self) -> None: ...
    def delete_banner_additional_image(self) -> None: ...
    def delete_banner_hover_image(self) -> None: ...
    def delete_header(self) -> None: ...
    def delete_image(self, name: Any) -> None: ...
    def delete_mobile_header(self) -> None: ...
    def delete_mobile_icon(self) -> None: ...
    def update(self, stylesheet: Any, reason: Optional[Any] = ...) -> None: ...
    def upload(self, name: Any, image_path: Any): ...
    def upload_banner(self, image_path: Any) -> None: ...
    def upload_banner_additional_image(self, image_path: Any, align: Optional[Any] = ...) -> None: ...
    def upload_banner_hover_image(self, image_path: Any) -> None: ...
    def upload_header(self, image_path: Any): ...
    def upload_mobile_header(self, image_path: Any): ...
    def upload_mobile_icon(self, image_path: Any): ...

class SubredditWiki:
    def __getitem__(self, page_name: Any): ...
    banned: Any = ...
    contributor: Any = ...
    subreddit: Any = ...
    def __init__(self, subreddit: Any) -> None: ...
    def __iter__(self) -> Any: ...
    def create(self, name: Any, content: Any, reason: Optional[Any] = ..., **other_settings: Any): ...
    def revisions(self, **generator_kwargs: Any): ...
