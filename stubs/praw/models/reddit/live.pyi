from .base import RedditBase as RedditBase
from .mixins import FullnameMixin as FullnameMixin
from typing import Any, Optional
from typing import Any, Optional

from .base import RedditBase as RedditBase
from .mixins import FullnameMixin as FullnameMixin


class LiveContributorRelationship:
    @staticmethod
    def _handle_permissions(permissions: Any): ...
    def __call__(self): ...
    thread: Any = ...
    def __init__(self, thread: Any) -> None: ...
    def accept_invite(self) -> None: ...
    def invite(self, redditor: Any, permissions: Optional[Any] = ...) -> None: ...
    def leave(self) -> None: ...
    def remove(self, redditor: Any) -> None: ...
    def remove_invite(self, redditor: Any) -> None: ...
    def update(self, redditor: Any, permissions: Optional[Any] = ...) -> None: ...
    def update_invite(self, redditor: Any, permissions: Optional[Any] = ...) -> None: ...

class LiveThread(RedditBase):
    STR_FIELD: str = ...
    def contrib(self): ...
    def contributor(self): ...
    def __eq__(self, other: Any) -> Any: ...
    def __getitem__(self, update_id: Any): ...
    def __hash__(self) -> Any: ...
    id: Any = ...
    def __init__(self, reddit: Any, id: Optional[Any] = ..., _data: Optional[Any] = ...) -> None: ...
    def _fetch_info(self): ...
    def _fetch_data(self): ...
    _fetched: bool = ...
    def _fetch(self) -> None: ...
    def discussions(self, **generator_kwargs: Any): ...
    def report(self, type: Any) -> None: ...
    def updates(self, **generator_kwargs: Any) -> None: ...

class LiveThreadContribution:
    thread: Any = ...
    def __init__(self, thread: Any) -> None: ...
    def add(self, body: Any) -> None: ...
    def close(self) -> None: ...
    def update(self, title: Optional[Any] = ..., description: Optional[Any] = ..., nsfw: Optional[Any] = ..., resources: Optional[Any] = ..., **other_settings: Any) -> None: ...

class LiveUpdate(FullnameMixin, RedditBase):
    STR_FIELD: str = ...
    _kind: str = ...
    def contrib(self): ...
    @property
    def thread(self): ...
    _fetched: bool = ...
    _thread: Any = ...
    id: Any = ...
    def __init__(self, reddit: Any, thread_id: Optional[Any] = ..., update_id: Optional[Any] = ..., _data: Optional[Any] = ...) -> None: ...
    def __setattr__(self, attribute: Any, value: Any) -> None: ...
    def _fetch(self) -> None: ...

class LiveUpdateContribution:
    update: Any = ...
    def __init__(self, update: Any) -> None: ...
    def remove(self) -> None: ...
    def strike(self) -> None: ...
