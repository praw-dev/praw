from typing import Any, Optional
from typing import NoReturn, List, Union, Dict, Literal

from .base import RedditBase as RedditBase
from .mixins import FullnameMixin as FullnameMixin
from .submission import Submission
from .. import RedditorList, Redditor, ListingGenerator
from ...reddit import Reddit
from ...util.cache import cachedproperty


class LiveContributorRelationship:
    def __call__(self) -> RedditorList: ...
    thread: LiveThread = ...
    def __init__(self, thread: LiveThread) -> LiveThreadContribution: ...
    def accept_invite(self) -> NoReturn: ...
    def invite(self, redditor: Union[Redditor, str], permissions: Optional[List[str]] = ...) -> NoReturn: ...
    def leave(self) -> NoReturn: ...
    def remove(self, redditor: Union[Redditor, str]) -> NoReturn: ...
    def remove_invite(self, redditor: Union[Redditor, str]) -> NoReturn: ...
    def update(self, redditor: Union[Redditor, str], permissions: Optional[List[str]] = ...) -> NoReturn: ...
    def update_invite(self, redditor: Union[Redditor, str], permissions: Optional[List[str]] = ...) -> NoReturn: ...

class LiveThread(RedditBase):
    STR_FIELD: str = ...
    created_utc: str = ...
    description: str = ...
    description_html: str = ...
    id: str = ...
    nsfw: bool = ...
    @cachedproperty
    def contrib(self): ...
    @cachedproperty
    def contributor(self): ...
    def __eq__(self, other: Union[str, Any]) -> bool: ...
    def __getitem__(self, update_id: Any): ...
    def __hash__(self) -> int: ...
    def __init__(self, reddit: Reddit, id: Optional[str] = ..., _data: Optional[Dict[str, Any]] = ...) -> LiveThread: ...
    def discussions(self, **generator_kwargs: str) -> ListingGenerator[Submission]: ...
    def report(self, type: Literal["spam", "vote-manipulation", "personal-information", "sexualizing-minors", "site-breaking"]) -> NoReturn: ...
    def updates(self, **generator_kwargs: str) -> ListingGenerator[LiveUpdate]: ...

class LiveThreadContribution:
    thread: LiveThread = ...
    def __init__(self, thread: LiveThread) -> LiveThreadContribution: ...
    def add(self, body: str) -> NoReturn: ...
    def close(self) -> NoReturn: ...
    def update(self, title: Optional[str] = ..., description: Optional[str] = ..., nsfw: Optional[bool] = ..., resources: Optional[str] = ..., **other_settings: str) -> NoReturn: ...

class LiveUpdate(FullnameMixin, RedditBase):
    STR_FIELD: str = ...
    author: Redditor = ...
    body: str = ...
    body_html: str = ...
    created_utc: str = ...
    stricken: bool = ...
    @cachedproperty
    def contrib(self) -> LiveUpdateContribution: ...
    @property
    def thread(self) -> LiveThread: ...
    def __init__(self, reddit: Reddit, thread_id: Optional[str] = ..., update_id: Optional[str] = ..., _data: Optional[Dict[str, Any]] = ...) -> LiveUpdate: ...
    def __setattr__(self, attribute: str, value: Any) -> NoReturn: ...

class LiveUpdateContribution:
    update: LiveUpdate = ...
    def __init__(self, update: LiveUpdate) -> LiveUpdateContribution: ...
    def remove(self) -> NoReturn: ...
    def strike(self) -> NoReturn: ...
