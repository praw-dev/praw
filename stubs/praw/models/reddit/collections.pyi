from typing import Any, Optional
from typing import List, Iterable, Dict, NoReturn, Union, \
    Generator

from .base import RedditBase as RedditBase
from .redditor import Redditor
from .submission import Submission
from .subreddit import Subreddit
from ..base import PRAWBase as PRAWBase
from ...reddit import Reddit
from ...util.cache import cachedproperty


class Collection(RedditBase):
    STR_FIELD: str = ...
    author: Redditor = ...
    collection_id: str = ...
    created_at_utc: str = ...
    description: str = ...
    last_update_utc: str = ...
    link_ids: List[Submission] = ...
    permalink: str = ...
    sorted_links: Iterable[Any]
    @cachedproperty
    def mod(self) -> CollectionModeration: ...
    @cachedproperty
    def subreddit(self) -> Subreddit: ...
    def __init__(self, reddit: Reddit, _data: Optional[Dict[str, Any]] = ..., collection_id: Optional[str] = ..., permalink: Optional[str] = ...) -> Collection: ...
    def __iter__(self) -> Generator[Any]: ...
    def __len__(self) -> int: ...
    def __setattr__(self, attribute: str, value: Any) -> NoReturn: ...
    def follow(self) -> NoReturn: ...
    def unfollow(self) -> NoReturn: ...

class CollectionModeration(PRAWBase):
    collection_id: str = ...
    def __init__(self, reddit: Reddit, collection_id: str) -> CollectionModeration: ...
    def add_post(self, submission: Union[Submission, str]) -> NoReturn: ...
    def delete(self) -> NoReturn: ...
    def remove_post(self, submission: Union[Submission, str]) -> NoReturn: ...
    def reorder(self, links: List[Union[Submission, str]]) -> NoReturn: ...
    def update_description(self, description: str) -> NoReturn: ...
    def update_title(self, title: str) -> NoReturn: ...

class SubredditCollections(PRAWBase):
    @cachedproperty
    def mod(self) -> SubredditCollectionsModeration: ...
    def __call__(self, collection_id: Optional[str] = ..., permalink: Optional[str] = ...) -> Collection: ...
    subreddit: Union[Subreddit, str] = ...
    def __init__(self, reddit: Any, subreddit: Union[Subreddit, str], _data: Optional[Dict[str, Any]] = ...) -> SubredditCollections: ...
    def __iter__(self) -> Generator[Collection]: ...

class SubredditCollectionsModeration(PRAWBase):
    subreddit_fullname: str = ...
    def __init__(self, reddit: Reddit, sub_fullname: str, _data: Optional[Dict[str, Any]] = ...) -> SubredditCollectionsModeration: ...
    def create(self, title: str, description: str): ...
