from ...const import API_PATH as API_PATH
from ...exceptions import ClientException as ClientException
from ...util.cache import cachedproperty as cachedproperty
from ..base import PRAWBase as PRAWBase
from .base import RedditBase as RedditBase
from .submission import Submission as Submission
from .subreddit import Subreddit as Subreddit
from typing import Any, Optional

class Collection(RedditBase):
    STR_FIELD: str = ...
    def mod(self): ...
    def subreddit(self): ...
    collection_id: Any = ...
    def __init__(self, reddit: Any, _data: Optional[Any] = ..., collection_id: Optional[Any] = ..., permalink: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...
    def __len__(self): ...
    author: Any = ...
    def __setattr__(self, attribute: Any, value: Any) -> None: ...
    def follow(self) -> None: ...
    def unfollow(self) -> None: ...

class CollectionModeration(PRAWBase):
    collection_id: Any = ...
    def __init__(self, reddit: Any, collection_id: Any) -> None: ...
    def add_post(self, submission: Any) -> None: ...
    def delete(self) -> None: ...
    def remove_post(self, submission: Any) -> None: ...
    def reorder(self, links: Any) -> None: ...
    def update_description(self, description: Any) -> None: ...
    def update_title(self, title: Any) -> None: ...

class SubredditCollections(PRAWBase):
    def mod(self): ...
    def __call__(self, collection_id: Optional[Any] = ..., permalink: Optional[Any] = ...): ...
    subreddit: Any = ...
    def __init__(self, reddit: Any, subreddit: Any, _data: Optional[Any] = ...) -> None: ...
    def __iter__(self) -> Any: ...

class SubredditCollectionsModeration(PRAWBase):
    subreddit_fullname: Any = ...
    def __init__(self, reddit: Any, sub_fullname: Any, _data: Optional[Any] = ...) -> None: ...
    def create(self, title: Any, description: Any): ...
