from ..listing.mixins import SubmissionListingMixin as SubmissionListingMixin
from .base import RedditBase as RedditBase
from .mixins import FullnameMixin as FullnameMixin, ThingModerationMixin as ThingModerationMixin, UserContentMixin as UserContentMixin
from typing import Any, Optional
from typing import Any, Optional

from .base import RedditBase as RedditBase
from .mixins import FullnameMixin as FullnameMixin, ThingModerationMixin as ThingModerationMixin, \
    UserContentMixin as UserContentMixin
from ..listing.mixins import SubmissionListingMixin as SubmissionListingMixin


class Submission(SubmissionListingMixin, UserContentMixin, FullnameMixin, RedditBase):
    STR_FIELD: str = ...
    @staticmethod
    def id_from_url(url: Any): ...
    @property
    def _kind(self): ...
    @property
    def comments(self): ...
    def flair(self): ...
    def mod(self): ...
    @property
    def shortlink(self): ...
    comment_limit: int = ...
    comment_sort: str = ...
    id: Any = ...
    _comments_by_id: Any = ...
    def __init__(self, reddit: Any, id: Optional[Any] = ..., url: Optional[Any] = ..., _data: Optional[Any] = ...) -> None: ...
    def __setattr__(self, attribute: Any, value: Any) -> None: ...
    def _chunk(self, other_submissions: Any, chunk_size: Any) -> None: ...
    def _fetch_info(self): ...
    def _fetch_data(self): ...
    _fetched: bool = ...
    def _fetch(self) -> None: ...
    def mark_visited(self) -> None: ...
    def hide(self, other_submissions: Optional[Any] = ...) -> None: ...
    def unhide(self, other_submissions: Optional[Any] = ...) -> None: ...
    def crosspost(self, subreddit: Any, title: Optional[Any] = ..., send_replies: bool = ..., flair_id: Optional[Any] = ..., flair_text: Optional[Any] = ..., nsfw: bool = ..., spoiler: bool = ...): ...

class SubmissionFlair:
    submission: Any = ...
    def __init__(self, submission: Any) -> None: ...
    def choices(self): ...
    def select(self, flair_template_id: Any, text: Optional[Any] = ...) -> None: ...

class SubmissionModeration(ThingModerationMixin):
    REMOVAL_MESSAGE_API: str = ...
    thing: Any = ...
    def __init__(self, submission: Any) -> None: ...
    def contest_mode(self, state: bool = ...) -> None: ...
    def flair(self, text: str = ..., css_class: str = ...) -> None: ...
    def nsfw(self) -> None: ...
    def set_original_content(self) -> None: ...
    def sfw(self) -> None: ...
    def spoiler(self) -> None: ...
    def sticky(self, state: bool = ..., bottom: bool = ...): ...
    def suggested_sort(self, sort: str = ...) -> None: ...
    def unset_original_content(self) -> None: ...
    def unspoiler(self) -> None: ...
