from typing import NoReturn, Dict, Union

from .base import RedditBase as RedditBase
from .mixins import FullnameMixin as FullnameMixin, \
    InboxableMixin as InboxableMixin, \
    ThingModerationMixin as ThingModerationMixin, \
    UserContentMixin as UserContentMixin
from .redditor import Redditor
from .submission import Submission
from .subreddit import Subreddit
from ..comment_forest import CommentForest
from ...reddit import Reddit
from ...util.cache import cachedproperty


class Comment(InboxableMixin, UserContentMixin, FullnameMixin, RedditBase):
    MISSING_COMMENT_MESSAGE: str = ...
    STR_FIELD: str = ...
    author: Redditor = ...
    body: str = ...
    created_utc: str = ...
    distinguished: bool = ...
    edited: bool = ...
    id: str = ...
    is_submitter: bool = ...
    link_id: str = ...
    parent_id: str = ...
    permalink: str = ...
    replies: CommentForest = ...
    reply_sort: str = ...
    score: int = ...
    stickied: bool = ...
    submission: Submission = ...
    subreddit: Subreddit = ...
    subreddit_id: str = ...
    @staticmethod
    def id_from_url(url: str): ...
    @property
    def is_root(self) -> bool: ...
    @cachedproperty
    def mod(self) -> CommentModeration: ...
    @property
    def replies(self) -> CommentForest: ...
    @property
    def submission(self) -> Submission: ...
    @submission.setter
    def submission(self, submission: Submission) -> NoReturn: ...
    def __init__(self, reddit: Reddit, id: Optional[str] = ..., url: Optional[str] = ..., _data: Optional[Dict[str, Any]] = ...) -> Comment: ...
    def __setattr__(self, attribute: str, value: Any) -> NoReturn: ...
    def parent(self) -> Union[Comment, Submission]: ...
    def refresh(self) -> Comment: ...

class CommentModeration(ThingModerationMixin):
    REMOVAL_MESSAGE_API: str = ...
    thing: Comment = ...
    def __init__(self, comment: Comment) -> CommentModeration: ...
