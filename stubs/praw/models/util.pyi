from typing import Any, Optional, NoReturn, List, Set, Callable

from .listing.generator import ListingGenerator


class BoundedSet:
    max_items: int = ...
    def __init__(self, max_items: int) -> BoundedSet: ...
    def __contains__(self, item: Any) -> bool: ...
    def add(self, item: Any) -> NoReturn: ...

class ExponentialCounter:
    def __init__(self, max_counter: str) -> ExponentialCounter: ...
    def counter(self) -> int: ...
    def reset(self) -> NoReturn: ...

def permissions_string(permissions: Optional[List[str]], known_permissions: Set[str]): ...
def stream_generator(function: Callable[[Any], ListingGenerator], pause_after: Optional[int] = ..., skip_existing: bool = ..., attribute_name: str = ..., **function_kwargs: Any) -> ListingGenerator[Any]: ...
