from typing import Any, Optional, List, Generator, Sequence, Literal

from .base import PRAWBase as PRAWBase
from .reddit.live import LiveThread as LiveThread
from .reddit.multi import Multireddit as Multireddit
from .reddit.subreddit import Subreddit


class LiveHelper(PRAWBase):
    def __call__(self, id: str) -> LiveThread: ...
    def info(self, ids: List[str]) -> Generator[LiveThread]: ...
    def create(self, title: str, description: Optional[str] = ..., nsfw: bool = ..., resources: Optional[str] = ...) -> LiveThread: ...
    def now(self) -> Optional[LiveThread]: ...

class MultiredditHelper(PRAWBase):
    def __call__(self, redditor: str, name: str) -> Multireddit: ...
    def create(self, display_name: str, subreddits: Sequence[Subreddit], description_md: Optional[str] = ..., icon_name: Literal["art and design", "ask", "books", "business", "cars", "comics", "cute animals", "diy", "entertainment", "food and drink", "funny", "games", "grooming", "health", "life advice", "military", "models pinup", "music", "news", "philosophy", "pictures and gifs", "science", "shopping", "sports", "style", "tech", "travel", "unusual stories", "video"] = ..., key_color: Optional[str] = ..., visibility: Literal["hidden", "private", "public"] = ..., weighting_scheme: Literal["classic", "fresh"] = ...) -> Multireddit: ...

class SubredditHelper(PRAWBase):
    def __call__(self, display_name: str) -> Subreddit: ...
    def create(self, name: str, title: Optional[str] = ..., link_type: Literal["any", "link", "self"] = ..., subreddit_type: Literal["archived", "employees_only", "gold_only", "gold_restricted", "private", "public", "restricted"] = ..., wikimode: Literal["anyone", "disabled", "modonly"] = ..., **other_settings: Any) -> Subreddit: ...
