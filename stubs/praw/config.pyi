from configparser import RawConfigParser
from threading import Lock

from typing import Any, ClassVar, Dict, NoReturn, Optional, Union


class _NotSet:
    def __bool__(self) -> bool: ...

    __nonzero__: Any = ...

    def __str__(self) -> str: ...

class Config:
    CONFIG: ClassVar[Optional[RawConfigParser]] = ...
    CONFIG_NOT_SET: ClassVar[_NotSet] = ...
    LOCK: ClassVar[Lock] = ...

    @staticmethod
    def _config_boolean(item: Union[bool, str]) -> bool: ...

    @classmethod
    def _load_config(cls) -> NoReturn: ...

    @property
    def short_url(self) -> Union[str, _NotSet]: ...

    _settings: Dict[str, Union[str, Any]] = ...
    custom: Dict[Union[str, Any], Union[str, Any]] = ...
    client_id: ClassVar[Optional[str]] = ...
    client_secret: ClassVar[Optional[str]] = ...
    oauth_url: ClassVar[Optional[str]] = ...
    reddit_url: ClassVar[Optional[str]] = ...
    refresh_token: ClassVar[Optional[str]] = ...
    redirect_uri: ClassVar[Optional[str]] = ...
    password: ClassVar[Optional[str]] = ...
    user_agent: ClassVar[Optional[str]] = ...
    username: ClassVar[Optional[str]] = ...

    def __init__(self, site_name: str, **settings: Union[str, Any]) -> NoReturn: ...

    def _fetch(self, key: Union[str, Any]) -> Any: ...

    def _fetch_default(self, key: Union[str, Any], default: Optional[Union[str, Any]] = ...) -> Any: ...

    def _fetch_or_not_set(self, key: Union[str, Any]) -> Union[_NotSet, Any]: ...

    _short_url: ClassVar[Union[str, _NotSet]] = ...
    check_for_updates: ClassVar[bool] = ...
    kinds: ClassVar[Dict[str, Any]] = ...

    def _initialize_attributes(self) -> NoReturn: ...
