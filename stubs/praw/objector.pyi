from typing import Any, Optional, Union, List, Dict, NoReturn, ClassVar

from .exceptions import APIException
from .models.reddit.base import RedditBase
from .reddit import Reddit


class Objector:
    @classmethod
    def parse_error(cls, data: Union[List[Any], Dict[str, Dict[str, str]]]) -> Optional[APIException]: ...
    @classmethod
    def check_error(cls, data: Union[List[Any], Dict[str, Dict[str, str]]]) -> NoReturn: ...
    parsers: ClassVar[Dict[str, Any]] = ...
    def __init__(self, reddit: Reddit, parsers: Optional[Dict[str, Any]] = ...) -> Objector: ...
    def objectify(self, data: Optional[Union[Dict[str, Union[Dict[str, Union[str, Dict[str, Union[str, Dict[str, Union[str, Dict[str, str]], Dict[str, str]]]], Dict[str, str]]], Dict[str, str]]], List[Dict[str, Union[Dict[str, Union[str, Dict[str, Union[str, Dict[str, Union[str, Dict[str, str]], Dict[str, str]]]], Dict[str, str]]], Dict[str, str]]]]]]) -> Optional[Union[RedditBase, Dict[str, Union[Dict[str, Union[str, Dict[str, Union[str, Dict[str, Union[str, Dict[str, str]], Dict[str, str]]]], Dict[str, str]]], Dict[str, str]]]]]: ...
